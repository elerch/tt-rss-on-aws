---
Description: TT-RSS AMI
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  # We will use podman rather than docker due to memory conservation
  # for a t3.nano. This is available for Amazon Linux.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SshSecurityGroup:
    Description: Existing security group to allow SSH access
    Type: String
    Default: ''
  ParameterPrefix:
    Type: String
    Default: /ttrss
  DatabaseBackupBucketSlashFile:
    Type: String
    Default: ttrss/ttrss.sql.gz
    AllowedPattern: ".+/.+"
    Description: bucket/file. Instance will be granted access to read get this file
  ConfigBackupBucketSlashFile:
    Type: String
    Default: ttrss/configs-and-scripts.tgz
    AllowedPattern: ".+/.+"
    Description: bucket/file. Instance will be granted access to read get this file
  CertsBucketSlashFile:
    Type: String
    Default: ttrss/certs.tgz
    AllowedPattern: ".+/.+"
    Description: bucket/file. Instance will be granted access to read get this file
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: _gpgYubikey
  Vpc:
    Type: AWS::EC2::VPC::Id
    Default: vpc-a8f93ccd
  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-969c4df3
  AllocationId:
    Type: String
    Default: eipalloc-8fa851eb
    AllowedPattern: eipalloc-.*
    Description: Allocation id for elastic IP address
  AvailabilityZone:
    Type: String
    Default: us-west-2b
Conditions:
  AllowSSH: !Not [!Equals [ !Ref SshSecurityGroup, "" ]]
Resources:
  ttrss:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.nano
      AvailabilityZone: !Ref AvailabilityZone
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: false
        DeviceIndex: '0'
        GroupSet:
        - Ref: RssSecurityGroup
        - !If
          - AllowSSH
          - !Ref SshSecurityGroup
          - !Ref AWS::NoValue
        SubnetId: !Ref PublicSubnet
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/sh
          echo Installing podman
          curl -s -L -o /etc/yum.repos.d/devel:kubic:libcontainers:stable.repo https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/CentOS_7/devel:kubic:libcontainers:stable.repo
          yum -y install yum-plugin-copr
          yum -y copr enable lsm5/container-selinux
          yum -y install podman dnsmasq
          mkdir /config
          # Untar config files and startup script to run after reboot
          echo Copying configuration from s3://${ConfigBackupBucketSlashFile}
          aws s3 cp s3://${ConfigBackupBucketSlashFile} - | tar xz --directory=/
          echo Starting bootstrap
          /config/bootstrap ${ParameterPrefix} ${DatabaseBackupBucketSlashFile} ${CertsBucketSlashFile}
  RssSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        ToPort: '443'
        IpProtocol: TCP
      VpcId: !Ref Vpc
  TTRSSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  ParameterStoreReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ssmParameterRead
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource:
          - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterPrefix}/*
      Roles:
      - Ref: TTRSSInstanceRole
  S3ReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3read
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - !Sub arn:${AWS::Partition}:s3:::${DatabaseBackupBucketSlashFile}
          - !Sub arn:${AWS::Partition}:s3:::${ConfigBackupBucketSlashFile}
          - !Sub arn:${AWS::Partition}:s3:::${CertsBucketSlashFile}
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - !Sub arn:${AWS::Partition}:s3:::${DatabaseBackupBucketSlashFile}
      Roles:
      - Ref: TTRSSInstanceRole
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: TTRSSInstanceRole
  EIP:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !Ref AllocationId
      InstanceId: !Ref ttrss
