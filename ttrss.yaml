---
Description: TT-RSS AMI
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DatabaseBackupBucketSlashFile:
    Type: String
    Default: ttrss/ttrss.sql.gz
    AllowedPattern: ".+/.+"
    Description: bucket/file. Instance will be granted access to read get this file
  ConfigBackupBucketSlashFile:
    Type: String
    Default: ttrss/configs-and-scripts.tgz
    AllowedPattern: ".+/.+"
    Description: bucket/file. Instance will be granted access to read get this file
  DBRootPass:
    Type: String
  DBUser:
    Type: String
  DBPass:
    Type: String
  Domain:
    Type: String
  Email:
    Type: String
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: home-account
  Vpc:
    Type: AWS::EC2::VPC::Id
    Default: vpc-a8f93ccd
  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-969c4df3
  AllocationId:
    Type: String
    Default: eipalloc-8fa851eb
    AllowedPattern: eipalloc-.*
    Description: Allocation id for elastic IP address
  AvailabilityZone:
    Type: String
    Default: us-west-2b
Mappings:
  # We're switching to rkt here as docker is too memory intensive/leaky
  # for a t2.nano. rkt **really** seems to want systemd, which isn't
  # available in Amazon Linux. CoreOS is too much of a PITA to use as
  # it's so container focused it's hard to log in and do any real testing/
  # diagnostic work. This leaves us with arch, which will give us a good
  # package manager/control, is now systemd-based, and for which there
  # are good community AMIs. It's also a minimal distribution.
  RegionMap:
    us-west-2:
      AMI: ami-3d7af85d # Arch 2017-03-01 x86_64 HVM EBS
Resources:
  ttrss:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      InstanceType: t2.nano
      AvailabilityZone: !Ref AvailabilityZone
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: false
        DeviceIndex: '0'
        GroupSet: !Ref RssSecurityGroup
        SubnetId: !Ref PublicSubnet
      UserData: !Base64
        'Fn::Sub': |
          #!/bin/sh
          # We'll need an updated keyring before we can do anything else
          echo Bringing rolling release up to date
          pacman -S archlinux-keyring --noconfirm
          rm /etc/ssl/certs/ca-certificates.crt # system update may fail without cert removal
          pacman -Syu --noconfirm
          [ -r /etc/ssl/certs/ca-certificates.crt ] || \
            ln -s /etc/ca-certificates/extracted/ca-bundle.trust.crt /etc/ssl/certs/ca-certificates.crt
          # Required operational packages:
          # rkt (containers)
          # python2-pip (to install awscli and ps-mem)
          echo Installing required operational packages
          pacman -S rkt python2-pip --noconfirm
          pip2 install awscli
          mkdir /config
          # Untar config files and startup script to run after reboot
          echo Copying configuration from s3://${ConfigBackupBucketSlashFile}
          aws s3 cp s3://${ConfigBackupBucketSlashFile} - | tar --directory=/ xz
          echo Setting up startup service and rebooting
          echo '
          DOMAIN=${Domain}
          EMAIL=${Email}
          DatabaseBackupBucketSlashFile=${DatabaseBackupBucketSlashFile}
          DBRootPass=${DBRootPass}
          DBUser=${DBUser}
          DBPass=${DBPass}' > /cfn-params.sh
          chmod 400 /cfn-params.sh
          # Do the rest in a script after reboot
          echo ' 
          [Unit]
          Description=Bootstraps the remaining system

          [Service]
          Type=oneshot
          ExecStart=/bin/bash -c "/config/bootstrap /cfn-params.sh"
          RemainAfterExit=true
          StandardOutput=journal

          [Install]
          WantedBy=multi-user.target' > /usr/lib/systemd/system/bootstrap.service
          systemctl enable bootstrap
          shutdown -r now
  RssSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '443'
        ToPort: '443'
        IpProtocol: TCP
      VpcId: !Ref Vpc
  S3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: s3read
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          Resource:
          - !Sub arn:aws:s3:::${DatabaseBackupBucketSlashFile}
          - !Sub arn:aws:s3:::${ConfigBackupBucketSlashFile}
        - Effect: Allow
          Action:
          - s3:PutObject
          Resource:
          - !Sub arn:aws:s3:::${DatabaseBackupBucketSlashFile}
      Roles:
      - Ref: S3Role
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: !Ref S3Role
  EIP:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !Ref AllocationId
      InstanceId: !Ref ttrss
