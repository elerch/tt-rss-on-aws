{
    "Description": "TT-RSS AMI",
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "home-account"
        },
        "DatabaseBackupBucketSlashFile": {
            "Type": "String",
            "Default": "ttrss/ttrss.sql.gz",
            "AllowedPattern": ".+/.+",
            "Description": "bucket/file. Instance will be granted access to read get this file"
        },
        "ConfigBackupBucketSlashFile": {
            "Type": "String",
            "Default": "ttrss/config.php",
            "AllowedPattern": ".+/.+",
            "Description": "bucket/file. Instance will be granted access to read get this file"
        },
        "SslConfigBucketSlashFile": {
            "Type": "String",
            "Default": "ttrss/ssl.conf",
            "AllowedPattern": ".+/.+",
            "Description": "bucket/file. Instance will be granted access to read get this file"
        },
        "ReaderBucketSlashFile": {
            "Type": "String",
            "Default": "ttrss/reader_daemon",
            "AllowedPattern": ".+/.+",
            "Description": "bucket/file. Instance will be granted access to read get this file"
        },
        "HttpdConfigBucketSlashFile": {
            "Type": "String",
            "Default": "ttrss/reduce_memory.conf",
            "AllowedPattern": ".+/.+",
            "Description": "bucket/file. Instance will be granted access to read get this file"
        },
        "BaseConfigBucketSlashFile": {
            "Type": "String",
            "Default": "ttrss/00-base.conf",
            "AllowedPattern": ".+/.+",
            "Description": "bucket/file. Instance will be granted access to read get this file"
        },
        "Vpc": {
            "Type": "AWS::EC2::VPC::Id",
            "Default": "vpc-a8f93ccd"
        },
        "PublicSubnet": {
            "Type": "AWS::EC2::Subnet::Id",
            "Default": "subnet-969c4df3"
        },
        "AllocationId": {
            "Type": "String",
            "Default": "eipalloc-8fa851eb",
            "AllowedPattern": "eipalloc-.*",
            "Description": "Allocation id for elastic IP address"
        },
        "AvailabilityZone": {
            "Type": "String",
            "Default": "us-west-2b"
        },
        "DBRootPass": { "Type": "String"},
        "DBUser": { "Type": "String" },
        "DBPass": { "Type": "String" }
    },
    "Mappings": {
        "RegionMap": {
            "us-west-2": {
                "AMI": "ami-63b25203"
            }
        }
    },
    "Resources": {
        "ttrss": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": "t2.nano",
                "AvailabilityZone": {"Ref": "AvailabilityZone"},
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "KeyName": {"Ref": "KeyName"},
                "NetworkInterfaces": [ {
                  "AssociatePublicIpAddress": "false",
                  "DeviceIndex": "0",
                  "GroupSet": [{ "Ref" : "RssSecurityGroup" }],
                  "SubnetId": { "Ref" : "PublicSubnet" }
                } ],
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                     "#!/bin/sh\n",
                     "echo Setting up packages\n",
                     "yum update -y\n",
                     "yum remove -y php php-cli httpd-tools httpd php-common php55-mysql\n",
                     "#php55-mysql missing\n",
                     "yum install -y git php55 php55-mysql php55-mbstring php55-mysqlnd docker mod24_ssl mysql # client only\n",
                     "git clone --depth 1 https://tt-rss.org/git/tt-rss.git /var/tt-rss\n",
                     "service docker start\n",
                     "chkconfig docker on\n",
                     "docker pull mariadb\n",
                     "docker run --name mariadb -e MYSQL_ROOT_PASSWORD=", {"Ref": "DBRootPass"}, " -d mariadb:latest\n",
                     "echo Getting objects from S3\n",
                     "aws s3 cp s3://", {"Ref": "ConfigBackupBucketSlashFile"}, " /var/tt-rss\n",
                     "aws s3 cp s3://", {"Ref": "DatabaseBackupBucketSlashFile"}, " - | zcat > ttrss.sql \n",
                     "echo Configuring application\n",
                     "export dbip=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' mariadb)\n",
                     "sed -i s/dbhostreplaceme/$dbip/ /var/tt-rss/config.php\n",
                     "sed -i s/dbuserreplaceme/", {"Ref": "DBUser"}, "/ /var/tt-rss/config.php\n",
                     "sed -i s/dbpassreplaceme/", {"Ref": "DBPass"}, "/ /var/tt-rss/config.php\n",
                     "# TT-RSS permissions \n",
                     "pushd /var/tt-rss && chmod -R 777 cache/images cache/upload cache/export cache/js feed-icons lock; popd\n",
                     "# Paper theme\n",
                     "curl -sL https://github.com/DarkPreacher/tt-rss-theme-paper/archive/master.tar.gz | tar xz && mv -f tt-rss-theme-paper-master/* /var/tt-rss/themes/ && rm -rf tt-rss-theme-paper-master/\n",
                     "echo Removing unneeded apache modules, configure for reduced memory\n",
                     "pushd /etc/httpd\n",
                     "aws s3 cp s3://", {"Ref": "HttpdConfigBucketSlashFile"}, " conf.d/\n",
                     "cd conf.modules.d\n",
                     "rm 00-dav.conf 00.lua.conf 00-proxy.conf 01-cgi.conf\n",
                     "aws s3 cp s3://", {"Ref": "BaseConfigBucketSlashFile"}, " 00-base.conf\n",
                     "popd\n",
                     "echo Loading and configuring database\n",
                     "# wait for default db to be created\n",
                     "until mysql -u root -h $dbip -e \"CREATE USER '", {"Ref": "DBUser"}, "'@'%' IDENTIFIED BY '", {"Ref": "DBPass"}, "';\" --password='", {"Ref": "DBRootPass"}, "'; do echo retrying; sleep 5; done\n",
                     "mysql -u root -h $dbip -e 'CREATE DATABASE ttrss;' --password='", {"Ref": "DBRootPass"}, "'\n",
                     "# need to create a temporary file as the memory usage was too much for a t2.nano \n",
                     "mysql -u root -h $dbip -D ttrss --password='", {"Ref": "DBRootPass"}, "' < ttrss.sql \n",
                     "rm ttrss.sql \n",
                     "# The schema is ttrss regardless of the user, so the grant should be hard coded to ttrss.* \n",
                     "mysql -u root -h $dbip -e \"GRANT ALL PRIVILEGES ON ttrss . * TO '", {"Ref": "DBUser"}, "'@'%';\" --password='", {"Ref": "DBRootPass"}, "'\n",
                     "mysql -u root -h $dbip -e \"FLUSH PRIVILEGES;\" --password='", {"Ref": "DBRootPass"}, "'\n",
                     "echo Configuring ssl/procuring cert \n",
                     "echo '\n",
                     "Alias \"/.well-known/acme-challenge/\" \"/var/run/acme/acme-challenge/\"\n",
                     "<Directory \"/var/run/acme/acme-challenge\">\n",
                     "  AllowOverride None\n",
                     "  Options None\n",
                     "  # If using Apache 2.4+\n",
                     "  Require all granted\n",
                     "</Directory>\n",
                     "'> /etc/httpd/conf.d/acme-challenge.conf\n",
                     "url=$(curl -s https://api.github.com/repos/hlandau/acme/releases | grep browser_download_url | grep linux_amd64_cgo.tar.gz | head -n 1 | cut -d '\"' -f 4)\n",
                     "curl -sL $url | tar -xz\n",
                     "mv acmetool*/bin/* /opt\n",
                     "rm -rf acmetool*\n",
                     "echo '\n",
                     "\"acme-enter-email\": \"lobo@lerch.org\"\n",
                     "\"acme-agreement:https://letsencrypt.org/documents/LE-SA-v1.0.1-July-27-2015.pdf\": true\n",
                     "# \"acmetool-quickstart-choose-server\": https://acme-staging.api.letsencrypt.org/directory\n",
                     "\"acmetool-quickstart-choose-server\": https://acme-v01.api.letsencrypt.org/directory\n",
                     "# \"acmetool-quickstart-choose-method\": redirector\n",
                     "\"acmetool-quickstart-choose-method\": listen\n",
                     "# \"acmetool-quickstart-choose-method\": webroot\n",
                     "\"acmetool-quickstart-webroot-path\": \"/var/www/.well-known/acme-challenge\"\n",
                     "\"acmetool-quickstart-complete\": true\n",
                     "\"acmetool-quickstart-install-cronjob\": false\n",
                     "\"acmetool-quickstart-install-haproxy-script\": true\n",
                     "#\"acmetool-quickstart-install-redirector-systemd\": true\n",
                     "\"acmetool-quickstart-key-type\": ecdsa\n",
                     "\"acmetool-quickstart-rsa-key-size\": 4096\n",
                     "\"acmetool-quickstart-ecdsa-curve\": nistp256\n",
                     "' > /opt/response.yaml\n",
                     "/opt/acmetool want rss.lerch.org --batch --response-file /opt/response.yaml\n",
                     "aws s3 cp s3://", {"Ref": "SslConfigBucketSlashFile"}, " /etc/httpd/conf.d/ssl.conf\n",
                     "sed -i 's/\\/var\\/www\\/html/\\/var\\/tt-rss/' /etc/httpd/conf/httpd.conf\n",
                     "echo Starting apache\n",
                     "service httpd start\n",
                     "chkconfig httpd on\n",
                     "echo setting up TT-RSS Update Daemon\n",
                     "aws s3 cp s3://", {"Ref": "ReaderBucketSlashFile"}, " /etc/init.d/reader\n",
                     "chmod 755 /etc/init.d/reader\n",
                     "chkconfig reader on\n",
                     "service reader start\n",
                     "\n",
                     "\n",
                     "echo Adding cron jobs for db backups to s3 and ssl cert renewal\n",
                     "# DB Backups\n",
                     "echo \"",
                     "#!/bin/sh\n",
                     "service reader stop\n",
                     "mysqldump -u ", {"Ref": "DBUser"}, " -h $dbip --password='", {"Ref": "DBPass"}, "' --opt ttrss > ttrss.sql\n",
                     "gzip -f ttrss.sql\n",
                     "aws s3 cp ttrss.sql.gz s3://", {"Ref": "DatabaseBackupBucketSlashFile"}, "\n",
                     "service start reader\n",
                     "\" > /opt/snapshot && chmod 755 /opt/snapshot\n",
                     "# 11am gmt = 3am Pacific\n",
                     "(crontab -l 2>/dev/null; echo '0 11 * * * /opt/snapshot') | crontab -\n",
                     "\n",
                     "\n",
                     "# SSL Certificate renewal \n",
                     "# Change acmetool response file to switch to webroot technique \n",
                     "sed -i s/listen/webroot/ /opt/response.yaml\n",
                     "(crontab -l 2>/dev/null; echo '0 11 * * * /opt/acmetool reconcile --batch --response-file /opt/response.yaml') | crontab -\n",
                     "docker start mariadb #memory issues are stopping this container. Restart\n",
                     "echo done\n",
                     "\n",
                     "\n",
                     "\n",
                     ""
                ]]}}
            }
        },
        "RssSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow HTTPS",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "443",
                        "ToPort": "443",
                        "IpProtocol": "TCP"
                    }
                ],
                "VpcId": {"Ref": "Vpc"}
            }
        },
        "S3Role": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "RolePolicies": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "s3read",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": [
                                { "Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "DatabaseBackupBucketSlashFile"}]]},
                                { "Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ConfigBackupBucketSlashFile"}]]},
                                { "Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "SslConfigBucketSlashFile"}]]},
                                { "Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "BaseConfigBucketSlashFile"}]]},
                                { "Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "HttpdConfigBucketSlashFile"}]]},
                                { "Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ReaderBucketSlashFile"}]]}
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Resource": [
                                { "Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "DatabaseBackupBucketSlashFile"}]]}
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "S3Role"
                    }
                ]
            }
        },
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "S3Role"
                    }
                ]
            }
        },
        "EIP": {
           "Type": "AWS::EC2::EIPAssociation",
           "Properties": {
              "AllocationId": {"Ref": "AllocationId"},
              "InstanceId": {"Ref": "ttrss"}
           }
        }
    }
}

