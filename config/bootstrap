#!/bin/bash
# This will run as root
# $1 will be the path of the file containing needed parameters
# This script will run at every boot, so it is important to exit before
# re-running (unless we want to run every time)
[ -f /bootstrap-completed ] && exit 0
date > /bootstrap-completed

# Source our important environment variables
source $1

echo DOMAIN=$DOMAIN
echo EMAIL=$EMAIL
echo DBRootPass=$DBRootPass
echo DBUser=$DBUser
echo DBPass=$DBPass
echo DatabaseBackupBucketSlashFile=$DatabaseBackupBucketSlashFile
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# For diagnostics/ssh etc
# rxvt-unicode-terminfo for ability to use the terminal over ssh from rxvt
# mariadb-clients lets us log into our db and bulk export, etc
pacman -S rxvt-unicode-terminfo mariadb-clients --noconfirm
# ps-mem (for looking at memory utilization beyond ps)
pip2 install ps-mem

rkt fetch --insecure-options=image docker://richarvey/nginx-php-fpm
rkt fetch --insecure-options=image docker://mariadb
rkt fetch --insecure-options=image docker://elerch/ttrss-update-daemon
mkdir /output
mkdir /data
$DIR/start-mariadb $DBRootPass

# Do some stuff while the DB cranks up for the first time
pacman -S git --noconfirm
$DIR/pull-ttrss /var/tt-rss

# ok, now get the critical IP address for the container
# Git clone should give us plenty of time for the db container to start
dbip=$(rkt status $mariadb |grep -F networks|cut -d= -f3)

echo Configuring application
sed -i "s/dbhostreplaceme/$dbip/g;
        s/dbuserreplaceme/${DBUser}/g;
        s/dbpassreplaceme/${DBPass}/g" /var/tt-rss/config.php

sed -i "s/dbhostreplaceme/$dbip/g;
        s/dbuserreplaceme/${DBUser}/g;
        s/dbpassreplaceme/${DBPass}/g;
        s/s3locationreplaceme/${DatabaseBackupBucketSlashFile}/g" $DIR/backup

echo Loading and configuring database
mysql -u root -h $dbip --password='${DBRootPass}' \
  -e "CREATE USER '${DBUser}'@'%' IDENTIFIED BY '${DBPass}';"
mysql -u root -h $dbip --password='${DBRootPass}' \
  -e 'CREATE DATABASE ttrss;'
# need to create a temporary file as the memory usage was too much
# for a t2.nano
aws s3 cp s3://${DatabaseBackupBucketSlashFile} - |tar xz
mysql -u root -h $dbip -D ttrss --password='${DBRootPass}' < ttrss.sql
rm ttrss.sql
# The schema is ttrss regardless of the user, so the grant should be hard coded to ttrss.*
mysql -u root -h $dbip --password='${DBRootPass}' \
  -e "GRANT ALL PRIVILEGES ON ttrss . * TO '${DBUser}'@'%';"
mysql -u root -h $dbip --password='${DBRootPass}' \
  -e "FLUSH PRIVILEGES;"


echo Starting up nginx
nginx=$($DIR/start-nginx $DOMAIN $EMAIL |tail -1)

echo setting up TT-RSS Update Daemon
$DIR/start-updates

echo Adding cron jobs for db backups to s3 and ssl cert renewal
(crontab -l 2>/dev/null; \
  cat $DIR/crontab |     \
  sed "s/rktid/$nginx/g; s/DIR/$DIR/g") | crontab
echo done
